(*This file is part of FSharpGPU.

FSharpGPU is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

(* Copyright © 2015-2016 Philip Curzon *)

namespace NovelFS.FSharpGPU

module internal ComputeArrays =
    /// Create an offset array from a supplied array and the specified offset
    let createArrayOffset offS newLength (array : ComputeArray) =
        match newLength with
        |None ->
            new ComputeArray(array.ArrayType, array.CudaPtr, array.Length, OffsetSubarray(offS), AutoGenerated)
        |Some n ->
            new ComputeArray(array.ArrayType, array.CudaPtr, n, OffsetSubarray(offS), AutoGenerated)

    /// create and fill a device array of all floats with a specific value
    let fillFloat length value =
        let mutable cudaPtr = System.IntPtr(0)
        GeneralDevice.createUninitialisedCUDADoubleArray(length, &cudaPtr) |> DeviceInterop.checkCudaResponse
        DeviceFloatKernels.setAllElementsToConstant(cudaPtr, 0, length, value) |> DeviceInterop.checkCudaResponse
        new ComputeArray(ComputeDataType.ComputeFloat, cudaPtr, length, FullArray, UserGenerated)
    /// create and fill a device array of all floats with a specific value
    let fillBool length value =
        let mutable cudaPtr = System.IntPtr(0)
        GeneralDevice.createUninitialisedCUDABoolArray(length, &cudaPtr) |> DeviceInterop.checkCudaResponse
        //DeviceBoolKernels.setAllElementsToConstant(cudaPtr, 0, length, 0.0) |> DeviceInterop.cudaCallWithExceptionCheck
        new ComputeArray(ComputeDataType.ComputeBool, cudaPtr, length, FullArray, UserGenerated)
    /// create and fill a device array of all floats with a specific value
    let computeArrayOfSameType length (array : ComputeArray) =
        let mutable cudaPtr = System.IntPtr(0)
        match array.ArrayType with
        |ComputeFloat -> GeneralDevice.createUninitialisedCUDADoubleArray(length, &cudaPtr) |> DeviceInterop.checkCudaResponse
        |ComputeBool -> GeneralDevice.createUninitialisedCUDABoolArray(length, &cudaPtr) |> DeviceInterop.checkCudaResponse
        |_ -> failwith "Unsupported type"
        new ComputeArray(array.ArrayType, cudaPtr, length, FullArray, UserGenerated)

module internal ComputeResults =
    let expandValueToArray length value =
        match value with
        |ResComputeFloat flt -> ResComputeArray <| ComputeArrays.fillFloat length flt
        |ResComputeBool bl -> ResComputeArray <| ComputeArrays.fillBool length bl
        |array -> array

    let rec length =
        function
        |ResComputeArray devArray -> devArray.Length
        |ResComputeTupleArray devArrays -> length (List.head devArrays)



